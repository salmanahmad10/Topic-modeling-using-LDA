# -*- coding: utf-8 -*-
"""topic modeling NLP final Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E4r1CN34AUeB-YsLf_7L5wDprmya1ta6
"""

import nltk

import re

import numpy as np

import pandas as pd

from pprint import pprint

import gensim

import gensim.corpora as corpora

from gensim.utils import simple_preprocess

from gensim.models import CoherenceModel

!pip install PYLDAvis

import pyLDAvis

import pyLDAvis.gensim

import matplotlib.pyplot as plt

import cufflinks as cf
cf.go_offline()
cf.set_config_file(offline=False, world_readable=True)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

from nltk.corpus import stopwords
nltk.download('stopwords')

stop_words = stopwords.words('english')

df = pd.read_json('https://raw.githubusercontent.com/selva86/datasets/master/newsgroups.json')

df

df.shape

df.head()['content'][0]

all_text=df.content

df['totalwords'] = df['content'].str.split().str.len()

df.totalwords

!python -m spacy download en_core_web_lg



data = df.content.values.tolist()

data = [re.sub('\S*@\S*\s?', '', sent) for sent in data]

data = [re.sub('\s+', ' ', sent) for sent in data]

data = [re.sub("\'", "", sent) for sent in data]

def sent_to_words(sentences):
    for sentence in sentences:
        yield(gensim.utils.simple_preprocess(str(sentence), deacc=True))  

data_words = list(sent_to_words(data))

print(data_words[:1])

bigram = gensim.models.Phrases(data_words, min_count=5, threshold=100)

print(bigram)



trigram = gensim.models.Phrases(bigram[data_words], threshold=100)

bigram_mod = gensim.models.phrases.Phraser(bigram)

trigram_mod = gensim.models.phrases.Phraser(trigram)

print(trigram_mod[bigram_mod[data_words[0]]])

def remove_stopwords(texts):
    return [[word for word in simple_preprocess(str(doc)) if word not in stop_words] for doc in texts]

def make_bigrams(texts):
    return [bigram_mod[doc] for doc in texts]

def make_trigrams(texts):
    return [trigram_mod[bigram_mod[doc]] for doc in texts]

def lemmatization(texts, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV']):
    texts_out = []
    for sent in texts:
        doc = nlp(" ".join(sent)) 
        texts_out.append([token.lemma_ for token in doc if token.pos_ in allowed_postags])
    return texts_out

data_words_nostops = remove_stopwords(data_words)

data_words_bigrams = make_bigrams(data_words_nostops)

!python3 -m spacy download en

from spacy.lang.en import English
import spacy

nlp = spacy.load('en', disable=['parser', 'ner'])

data_lemmatized = lemmatization(data_words_bigrams, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV'])

print(data_lemmatized[:1])

texts = data_lemmatized

id2word = corpora.Dictionary(data_lemmatized)

corpus = [id2word.doc2bow(text) for text in texts]

print(corpus[:1])

id2word[1]

[[(id2word[id], freq) for id, freq in cp] for cp in corpus[:1]]

lda_model = gensim.models.ldamodel.LdaModel(corpus=corpus,
                                           id2word=id2word,
                                           num_topics=20, 
                                           random_state=100,
                                           update_every=1,
                                           chunksize=100,
                                           passes=10,
                                           alpha='auto',
                                           per_word_topics=True)

pprint(lda_model.print_topics())
doc_lda = lda_model[corpus]
doc_lda

print('\nPerplexity: ', lda_model.log_perplexity(corpus))

from gensim.models.coherencemodel import CoherenceModel

coherence_model_lda = CoherenceModel(model=lda_model, texts=data_lemmatized, dictionary=id2word, coherence='c_v')
coherence_lda = coherence_model_lda.get_coherence()
print('\nCoherence Score: ', coherence_lda)

pyLDAvis.enable_notebook()

vis = pyLDAvis.gensim.prepare(lda_model, corpus, id2word)

vis

from gensim import corpora, models, similarities

from google.colab import drive
drive.mount('/content/gdrive')

path = F"/content/gdrive/My Drive/nlpProject/LdaModelFinal"

lda_model.save(path)

model =  models.LdaModel.load(path)

model.show_topics(200, 20)



